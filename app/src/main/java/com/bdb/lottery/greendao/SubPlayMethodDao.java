package com.bdb.lottery.greendao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.bdb.lottery.database.lot.entity.SubPlayMethodDesc;

import com.bdb.lottery.database.lot.entity.SubPlayMethod;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "Sub_play_method".
*/
public class SubPlayMethodDao extends AbstractDao<SubPlayMethod, Long> {

    public static final String TABLENAME = "Sub_play_method";

    /**
     * Properties of entity SubPlayMethod.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Row_id = new Property(0, Long.class, "row_id", true, "row_id");
        public final static Property Play_method_id = new Property(1, int.class, "play_method_id", false, "PLAY_METHOD_ID");
        public final static Property Method_desc_id = new Property(2, long.class, "method_desc_id", false, "METHOD_DESC_ID");
        public final static Property Parent_play_method = new Property(3, int.class, "parent_play_method", false, "PARENT_PLAY_METHOD");
        public final static Property Belongto = new Property(4, String.class, "belongto", false, "BELONGTO");
        public final static Property Enable = new Property(5, boolean.class, "enable", false, "ENABLE");
    }

    private DaoSession daoSession;


    public SubPlayMethodDao(DaoConfig config) {
        super(config);
    }
    
    public SubPlayMethodDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SubPlayMethod entity) {
        stmt.clearBindings();
 
        Long row_id = entity.getRow_id();
        if (row_id != null) {
            stmt.bindLong(1, row_id);
        }
        stmt.bindLong(2, entity.getPlay_method_id());
        stmt.bindLong(3, entity.getMethod_desc_id());
        stmt.bindLong(4, entity.getParent_play_method());
 
        String belongto = entity.getBelongto();
        if (belongto != null) {
            stmt.bindString(5, belongto);
        }
        stmt.bindLong(6, entity.getEnable() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SubPlayMethod entity) {
        stmt.clearBindings();
 
        Long row_id = entity.getRow_id();
        if (row_id != null) {
            stmt.bindLong(1, row_id);
        }
        stmt.bindLong(2, entity.getPlay_method_id());
        stmt.bindLong(3, entity.getMethod_desc_id());
        stmt.bindLong(4, entity.getParent_play_method());
 
        String belongto = entity.getBelongto();
        if (belongto != null) {
            stmt.bindString(5, belongto);
        }
        stmt.bindLong(6, entity.getEnable() ? 1L: 0L);
    }

    @Override
    protected final void attachEntity(SubPlayMethod entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SubPlayMethod readEntity(Cursor cursor, int offset) {
        SubPlayMethod entity = new SubPlayMethod( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // row_id
            cursor.getInt(offset + 1), // play_method_id
            cursor.getLong(offset + 2), // method_desc_id
            cursor.getInt(offset + 3), // parent_play_method
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // belongto
            cursor.getShort(offset + 5) != 0 // enable
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SubPlayMethod entity, int offset) {
        entity.setRow_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPlay_method_id(cursor.getInt(offset + 1));
        entity.setMethod_desc_id(cursor.getLong(offset + 2));
        entity.setParent_play_method(cursor.getInt(offset + 3));
        entity.setBelongto(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setEnable(cursor.getShort(offset + 5) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SubPlayMethod entity, long rowId) {
        entity.setRow_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SubPlayMethod entity) {
        if(entity != null) {
            return entity.getRow_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SubPlayMethod entity) {
        return entity.getRow_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getSubPlayMethodDescDao().getAllColumns());
            builder.append(" FROM Sub_play_method T");
            builder.append(" LEFT JOIN Sub_play_method_desc T0 ON T.\"METHOD_DESC_ID\"=T0.\"row_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected SubPlayMethod loadCurrentDeep(Cursor cursor, boolean lock) {
        SubPlayMethod entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        SubPlayMethodDesc subPlayMethodDesc = loadCurrentOther(daoSession.getSubPlayMethodDescDao(), cursor, offset);
         if(subPlayMethodDesc != null) {
            entity.setSubPlayMethodDesc(subPlayMethodDesc);
        }

        return entity;    
    }

    public SubPlayMethod loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<SubPlayMethod> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<SubPlayMethod> list = new ArrayList<SubPlayMethod>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<SubPlayMethod> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<SubPlayMethod> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
