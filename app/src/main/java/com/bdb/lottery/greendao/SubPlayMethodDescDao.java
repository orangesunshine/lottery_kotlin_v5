package com.bdb.lottery.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.bdb.lottery.database.lot.entity.SubPlayMethodDesc;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "Sub_play_method_desc".
*/
public class SubPlayMethodDescDao extends AbstractDao<SubPlayMethodDesc, Long> {

    public static final String TABLENAME = "Sub_play_method_desc";

    /**
     * Properties of entity SubPlayMethodDesc.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Row_id = new Property(0, Long.class, "row_id", true, "row_id");
        public final static Property Play_method_name = new Property(1, String.class, "play_method_name", false, "PLAY_METHOD_NAME");
        public final static Property Group_name = new Property(2, String.class, "group_name", false, "GROUP_NAME");
        public final static Property Play_method_description = new Property(3, String.class, "play_method_description", false, "PLAY_METHOD_DESCRIPTION");
        public final static Property Icon_ids = new Property(4, String.class, "icon_ids", false, "ICON_IDS");
        public final static Property Digit = new Property(5, String.class, "digit", false, "DIGIT");
        public final static Property One_zhu_item_counts = new Property(6, String.class, "one_zhu_item_counts", false, "ONE_ZHU_ITEM_COUNTS");
        public final static Property Ball_groups_item_title = new Property(7, String.class, "ball_groups_item_title", false, "BALL_GROUPS_ITEM_TITLE");
        public final static Property Belongto = new Property(8, String.class, "belongto", false, "BELONGTO");
        public final static Property Atleast_wei_shu = new Property(9, String.class, "atleast_wei_shu", false, "ATLEAST_WEI_SHU");
        public final static Property Digit_titles = new Property(10, String.class, "digit_titles", false, "DIGIT_TITLES");
        public final static Property Ball_text_list = new Property(11, String.class, "ball_text_list", false, "BALL_TEXT_LIST");
        public final static Property Isdanshi = new Property(12, boolean.class, "isdanshi", false, "isdanshi");
        public final static Property Is_start_zero = new Property(13, boolean.class, "is_start_zero", false, "is_start_zero");
        public final static Property ExistsLi = new Property(14, boolean.class, "existsLi", false, "existsLi");
        public final static Property One_zhu_allow_repeat = new Property(15, boolean.class, "one_zhu_allow_repeat", false, "one_zhu_allow_repeat");
        public final static Property Is_need_show_weizhi = new Property(16, boolean.class, "is_need_show_weizhi", false, "is_need_show_weizhi");
        public final static Property IsShowZero = new Property(17, boolean.class, "isShowZero", false, "isShowZero");
        public final static Property IsBuildAll = new Property(18, boolean.class, "isBuildAll", false, "isBuildAll");
        public final static Property IsReorder = new Property(19, boolean.class, "isReorder", false, "isReorder");
        public final static Property Is_show_type_select = new Property(20, boolean.class, "is_show_type_select", false, "is_show_type_select");
        public final static Property Item_ball_num_counts = new Property(21, int.class, "item_ball_num_counts", false, "ITEM_BALL_NUM_COUNTS");
        public final static Property Single_num_counts = new Property(22, int.class, "single_num_counts", false, "SINGLE_NUM_COUNTS");
        public final static Property Ball_groups_counts = new Property(23, int.class, "ball_groups_counts", false, "BALL_GROUPS_COUNTS");
        public final static Property Random_group_num = new Property(24, int.class, "random_group_num", false, "RANDOM_GROUP_NUM");
    }


    public SubPlayMethodDescDao(DaoConfig config) {
        super(config);
    }
    
    public SubPlayMethodDescDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SubPlayMethodDesc entity) {
        stmt.clearBindings();
 
        Long row_id = entity.getRow_id();
        if (row_id != null) {
            stmt.bindLong(1, row_id);
        }
        stmt.bindString(2, entity.getPlay_method_name());
 
        String group_name = entity.getGroup_name();
        if (group_name != null) {
            stmt.bindString(3, group_name);
        }
 
        String play_method_description = entity.getPlay_method_description();
        if (play_method_description != null) {
            stmt.bindString(4, play_method_description);
        }
 
        String icon_ids = entity.getIcon_ids();
        if (icon_ids != null) {
            stmt.bindString(5, icon_ids);
        }
 
        String digit = entity.getDigit();
        if (digit != null) {
            stmt.bindString(6, digit);
        }
 
        String one_zhu_item_counts = entity.getOne_zhu_item_counts();
        if (one_zhu_item_counts != null) {
            stmt.bindString(7, one_zhu_item_counts);
        }
 
        String ball_groups_item_title = entity.getBall_groups_item_title();
        if (ball_groups_item_title != null) {
            stmt.bindString(8, ball_groups_item_title);
        }
 
        String belongto = entity.getBelongto();
        if (belongto != null) {
            stmt.bindString(9, belongto);
        }
 
        String atleast_wei_shu = entity.getAtleast_wei_shu();
        if (atleast_wei_shu != null) {
            stmt.bindString(10, atleast_wei_shu);
        }
 
        String digit_titles = entity.getDigit_titles();
        if (digit_titles != null) {
            stmt.bindString(11, digit_titles);
        }
 
        String ball_text_list = entity.getBall_text_list();
        if (ball_text_list != null) {
            stmt.bindString(12, ball_text_list);
        }
        stmt.bindLong(13, entity.getIsdanshi() ? 1L: 0L);
        stmt.bindLong(14, entity.getIs_start_zero() ? 1L: 0L);
        stmt.bindLong(15, entity.getExistsLi() ? 1L: 0L);
        stmt.bindLong(16, entity.getOne_zhu_allow_repeat() ? 1L: 0L);
        stmt.bindLong(17, entity.getIs_need_show_weizhi() ? 1L: 0L);
        stmt.bindLong(18, entity.getIsShowZero() ? 1L: 0L);
        stmt.bindLong(19, entity.getIsBuildAll() ? 1L: 0L);
        stmt.bindLong(20, entity.getIsReorder() ? 1L: 0L);
        stmt.bindLong(21, entity.getIs_show_type_select() ? 1L: 0L);
        stmt.bindLong(22, entity.getItem_ball_num_counts());
        stmt.bindLong(23, entity.getSingle_num_counts());
        stmt.bindLong(24, entity.getBall_groups_counts());
        stmt.bindLong(25, entity.getRandom_group_num());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SubPlayMethodDesc entity) {
        stmt.clearBindings();
 
        Long row_id = entity.getRow_id();
        if (row_id != null) {
            stmt.bindLong(1, row_id);
        }
        stmt.bindString(2, entity.getPlay_method_name());
 
        String group_name = entity.getGroup_name();
        if (group_name != null) {
            stmt.bindString(3, group_name);
        }
 
        String play_method_description = entity.getPlay_method_description();
        if (play_method_description != null) {
            stmt.bindString(4, play_method_description);
        }
 
        String icon_ids = entity.getIcon_ids();
        if (icon_ids != null) {
            stmt.bindString(5, icon_ids);
        }
 
        String digit = entity.getDigit();
        if (digit != null) {
            stmt.bindString(6, digit);
        }
 
        String one_zhu_item_counts = entity.getOne_zhu_item_counts();
        if (one_zhu_item_counts != null) {
            stmt.bindString(7, one_zhu_item_counts);
        }
 
        String ball_groups_item_title = entity.getBall_groups_item_title();
        if (ball_groups_item_title != null) {
            stmt.bindString(8, ball_groups_item_title);
        }
 
        String belongto = entity.getBelongto();
        if (belongto != null) {
            stmt.bindString(9, belongto);
        }
 
        String atleast_wei_shu = entity.getAtleast_wei_shu();
        if (atleast_wei_shu != null) {
            stmt.bindString(10, atleast_wei_shu);
        }
 
        String digit_titles = entity.getDigit_titles();
        if (digit_titles != null) {
            stmt.bindString(11, digit_titles);
        }
 
        String ball_text_list = entity.getBall_text_list();
        if (ball_text_list != null) {
            stmt.bindString(12, ball_text_list);
        }
        stmt.bindLong(13, entity.getIsdanshi() ? 1L: 0L);
        stmt.bindLong(14, entity.getIs_start_zero() ? 1L: 0L);
        stmt.bindLong(15, entity.getExistsLi() ? 1L: 0L);
        stmt.bindLong(16, entity.getOne_zhu_allow_repeat() ? 1L: 0L);
        stmt.bindLong(17, entity.getIs_need_show_weizhi() ? 1L: 0L);
        stmt.bindLong(18, entity.getIsShowZero() ? 1L: 0L);
        stmt.bindLong(19, entity.getIsBuildAll() ? 1L: 0L);
        stmt.bindLong(20, entity.getIsReorder() ? 1L: 0L);
        stmt.bindLong(21, entity.getIs_show_type_select() ? 1L: 0L);
        stmt.bindLong(22, entity.getItem_ball_num_counts());
        stmt.bindLong(23, entity.getSingle_num_counts());
        stmt.bindLong(24, entity.getBall_groups_counts());
        stmt.bindLong(25, entity.getRandom_group_num());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SubPlayMethodDesc readEntity(Cursor cursor, int offset) {
        SubPlayMethodDesc entity = new SubPlayMethodDesc( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // row_id
            cursor.getString(offset + 1), // play_method_name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // group_name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // play_method_description
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // icon_ids
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // digit
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // one_zhu_item_counts
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // ball_groups_item_title
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // belongto
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // atleast_wei_shu
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // digit_titles
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // ball_text_list
            cursor.getShort(offset + 12) != 0, // isdanshi
            cursor.getShort(offset + 13) != 0, // is_start_zero
            cursor.getShort(offset + 14) != 0, // existsLi
            cursor.getShort(offset + 15) != 0, // one_zhu_allow_repeat
            cursor.getShort(offset + 16) != 0, // is_need_show_weizhi
            cursor.getShort(offset + 17) != 0, // isShowZero
            cursor.getShort(offset + 18) != 0, // isBuildAll
            cursor.getShort(offset + 19) != 0, // isReorder
            cursor.getShort(offset + 20) != 0, // is_show_type_select
            cursor.getInt(offset + 21), // item_ball_num_counts
            cursor.getInt(offset + 22), // single_num_counts
            cursor.getInt(offset + 23), // ball_groups_counts
            cursor.getInt(offset + 24) // random_group_num
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SubPlayMethodDesc entity, int offset) {
        entity.setRow_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPlay_method_name(cursor.getString(offset + 1));
        entity.setGroup_name(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPlay_method_description(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIcon_ids(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDigit(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setOne_zhu_item_counts(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setBall_groups_item_title(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setBelongto(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setAtleast_wei_shu(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setDigit_titles(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setBall_text_list(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setIsdanshi(cursor.getShort(offset + 12) != 0);
        entity.setIs_start_zero(cursor.getShort(offset + 13) != 0);
        entity.setExistsLi(cursor.getShort(offset + 14) != 0);
        entity.setOne_zhu_allow_repeat(cursor.getShort(offset + 15) != 0);
        entity.setIs_need_show_weizhi(cursor.getShort(offset + 16) != 0);
        entity.setIsShowZero(cursor.getShort(offset + 17) != 0);
        entity.setIsBuildAll(cursor.getShort(offset + 18) != 0);
        entity.setIsReorder(cursor.getShort(offset + 19) != 0);
        entity.setIs_show_type_select(cursor.getShort(offset + 20) != 0);
        entity.setItem_ball_num_counts(cursor.getInt(offset + 21));
        entity.setSingle_num_counts(cursor.getInt(offset + 22));
        entity.setBall_groups_counts(cursor.getInt(offset + 23));
        entity.setRandom_group_num(cursor.getInt(offset + 24));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SubPlayMethodDesc entity, long rowId) {
        entity.setRow_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SubPlayMethodDesc entity) {
        if(entity != null) {
            return entity.getRow_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SubPlayMethodDesc entity) {
        return entity.getRow_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
